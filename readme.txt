Задача

Реализовать механизм управления конфигурацией мобильного приложения.

Есть некий платежный сервис, в рамках которого помимо прочего авторизация.
В рамках авторизации есть различные сущности: организация, представительство, торговая точка, пользователь.
У сервиса есть клиент - мобильное приложение. В рамках мобильного приложения есть:
- тип сборки
- типа железа
- подключенное оборудование
- и др. параметры

Необходимо реализовать сервис удаленного гибкого конфигурирования мобильного приложения в зависимости от всех выше перечисленных параметров.



Доп.требования
- поддержка версионирования конфигов
- кеширование конфигов
- возможность подгрузки конфигов как и в авторизованной зоне, так и вне авторизованной зоне
- минимальное время загрузки удаленного конфига приложением

Предусловия: 
Есть уже реализованный сервис авторизации пользователя.




Вариант решения 1 (самый простой):
Подсистема будет состоять из
- сервиса администрирования, который будет принимать запросы на изменения конфигов и записывать изменения в БД
- фронт-сервиса, в который мобильное приложение будет ходить за конфигами
- БД

сервис администрирования получает запрос на изменение конфига, рендерит конфиг и кладет в БД
фронт-сервис ходит просто на каждый конфига ходит в БД

Плюсы: простота
Минусы:
1) рендеринг может быть относительно долгим процессом и если делать его в рамках запроса, достаточно велика вероятность, что запрос завершится неудачно:
Отвалится по таймауту, или сервис администрирования упадет и т. п. В этом случае рискуем либо потерять данные, либо получить неконсистентное состояние
2) фронт-сервис читает БД. Это может привести ко времени увеличения получения конфигов и к потенциальным ошибкам соединения с БД при получении конфига.




Вариант решения 2:
Подсистема будет состоять из
- сервиса администрирования, который будет принимать запросы на изменения конфигов и записывать изменения в БД
- сервиса рендерера, который будет ходить в БД, смотреть изменения, рендерить конфиги по новым данным и сообщать о новых отренедеренных конфигах фронт сервису, чтобы тот закешировал данные
- фронт-сервиса, в который мобильное приложение будет ходить за конфигами, и который также будет кешировать у себя в памяти отрендеренные конфиги
- БД

сервис администрирования получает запрос на изменение конфига и кладет их в БД
сервис рендерер читает БД, смотрит есть ли новые данные, по ним рендерит конфиги и в случае появления новых отрендеренных конфигов передает их фронт-сервису
фронт-сервис хранит кончики в своей памяти, туда же за ними и ходит. В случае падения фронт-сервиса, после его поднятия он должен сходить в БД и восстановить отренедеренные конфиги в памяти 

Плюсы:
1) Рендеринг происходит независимо от внесения изменения в конфиг
2) Отрендеренные конфиги хранятся в памяти фронт-сервиса, что позволит отдавать максимально быстро
Минусы:
1) Реализация усложняется
2) Рендерер спамит БД запросами
3) Есть вероятность отказа фронта-сервиса при принятии запроса на добавление в память отренедеренного конфига
4) Нужен механизм инвалидами кеша фронт-сервиса




Вариант решения 3:
По составу сервисов аналогичен вар. 2, плюс повяляются две очереди


сервис администрирования получает запрос на изменение конфига и кладет их в БД
сервис администрирования получает запрос на публикацию изменений и кладет ID изменений в очередь1
сервис рендерер читает очередь1, получая новое сообщение из очереди рендерит коннфиг и кладет ID отрендеренного конфига в очередь2
фронт-сервис читает очередь2, получая новое сообщение из очереди, читает конфиг из БД и кладет к себе в память

Плюсы:
1) Рендеринг происходит независимо от внесения изменения в конфиг
2) Отрендеренные конфиги хранятся в памяти фронт-сервиса, что позволит отдавать максимально быстро
3) Рендерер больше не спамит БД, а читает свою очередь
4) Если даже в моменте фронт-сервис упадет, то когда поднимется прочитает сообщение из своей очереди и прочитает нужные отрендеренные конфиги
Минусы:
1) Реализация еще больше усложняется
2) Появляются точки отказа в виде очередей
3) Проблема транзакционности чтения/записи в очереди и в БД




Предпочтительный вариант.
Целевой вариант, вероятно, вар. 3, но с упрощениями на старте разработки. В часотности, на старте, видимо, не будет вообще сервиса администрирования конфигов. Рендериться они будут вручную. Рендерер будет просто класть отрендеренный конфиг в БД и его ID в очередь. Фронт-сервис будет работать как описано в вар. 3. 


